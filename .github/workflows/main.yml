Build and Deployment.yaml
-------------------------------------------
 name: Build, Tag, Push to ECR, and Deploy to EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      -  main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Bump version for tagging Docker images
      - name: Bump Version
        id: bump_version
        run: |
          new_version=$(npm version patch)
          echo "New Version: $new_version"
          echo "::set-output name=version::$new_version"

      # Log in to AWS ECR
      - name: Login to AWS ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@v1

      # Get AWS account ID (for tagging and pushing the Docker image)
      - name: Get AWS Account ID
        id: aws_account
        run: |
          aws_account_id=$(aws sts get-caller-identity --query Account --output text)
          echo "::set-output name=account_id::$aws_account_id"

      # Build and Tag Docker Image for Patient Service
      - name: Build Patient Service Docker Image
        run: |
          $(aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com)
          docker build -t patient-service:${{ steps.bump_version.outputs.version }} -f ./patient_service_directory/Dockerfile .
          docker tag patient-service:${{ steps.bump_version.outputs.version }} ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com/patient-service:${{ steps.bump_version.outputs.version }}

      # Push Patient Service Docker Image to ECR
      - name: Push Patient Service Docker Image
        run: |
          docker push ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com/patient-service:${{ steps.bump_version.outputs.version }}

      # Build and Tag Docker Image for Appointment Service
      - name: Build Appointment Service Docker Image
        run: |
          docker build -t appointment-service:${{ steps.bump_version.outputs.version }} -f ./appointment_service_directory/Dockerfile .
          docker tag appointment-service:${{ steps.bump_version.outputs.version }} ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com/appointment-service:${{ steps.bump_version.outputs.version }}

      # Push Appointment Service Docker Image to ECR
      - name: Push Appointment Service Docker Image
        run: |
          docker push ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com/appointment-service:${{ steps.bump_version.outputs.version }}

      # Authenticate with AWS (for EKS cluster access)
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Change as per your region

      # Update kubeconfig for accessing the EKS cluster
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name your-cluster-name --region us-east-1

      # Deploy Patient Service to Kubernetes
      - name: Deploy Patient Service to EKS
        run: |
          kubectl set image deployment/patient-service patient-service=${{ steps.aws_account.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com/patient-service:${{ steps.bump_version.outputs.version }}
          kubectl apply -f k8s/patient_service_deployment.yaml
          kubectl apply -f k8s/patient_service_service.yaml

      # Deploy Appointment Service to Kubernetes
      - name: Deploy Appointment Service to EKS
        run: |
          kubectl set image deployment/appointment-service appointment-service=${{ steps.aws_account.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com/appointment-service:${{ steps.bump_version.outputs.version }}
          kubectl apply -f k8s/appointment_service_deployment.yaml
          kubectl apply -f k8s/appointment_service_service.yaml
